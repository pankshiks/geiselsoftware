--- backup_migrate.module
+++ backup_migrate.module
@@ -5,9 +5,9 @@
  * Primary hook implementations for Backup Migrate.
  */
 
-use BackupMigrate\Core\Config\Config;
-use BackupMigrate\Core\Services\BackupMigrate;
-use BackupMigrate\Core\Main\BackupMigrateInterface;
+use Drupal\backup_migrate\Core\Config\Config;
+use Drupal\backup_migrate\Core\Services\BackupMigrate;
+use Drupal\backup_migrate\Core\Main\BackupMigrateInterface;
 use Drupal\backup_migrate\Entity\Destination;
 use Drupal\backup_migrate\Entity\Schedule;
 use Drupal\backup_migrate\Entity\Source;
@@ -18,14 +18,18 @@
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Url;
 use Drupal\Core\Link;
-
-// Autoload the required classes.
-// @todo Apparently this isn't working on Windows machines.
-// @see https://www.drupal.org/node/2913021
-$loader = new Psr4ClassLoader();
-$loader->addPrefix('BackupMigrate\\Core\\', __DIR__ . '/lib/backup_migrate_core/src');
-$loader->addPrefix('BackupMigrate\\Drupal\\', __DIR__ . '/src');
-$loader->register();
+use Drupal\backup_migrate\Core\Service\TarArchiveReader;
+use Drupal\backup_migrate\Core\Service\TarArchiveWriter;
+use Drupal\backup_migrate\Drupal\Environment\DrupalSetMessageLogger;
+use Drupal\backup_migrate\Drupal\Destination\DrupalBrowserDownloadDestination;
+use Drupal\backup_migrate\Drupal\Destination\DrupalBrowserUploadDestination;
+use Drupal\backup_migrate\Core\Filter\FileNamer;
+use Drupal\backup_migrate\Core\Filter\CompressionFilter;
+use Drupal\backup_migrate\Drupal\Filter\DrupalEncrypt;
+use Drupal\backup_migrate\Drupal\Filter\DrupalUtils;
+use Drupal\backup_migrate\Core\Filter\MetadataWriter;
+use Drupal\backup_migrate\Core\File\TempFileManager;
+use Drupal\backup_migrate\Drupal\File\DrupalTempFileAdapter;
 
 define('BACKUP_MIGRATE_MODULE_VERSION', '8.x-4.x-dev');
 
@@ -43,10 +47,10 @@ function backup_migrate_perform_backup($source_id, $destination_id, $config = []
 
     // Run the backup.
     $bam->backup($source_id, $destination_id);
-    drupal_set_message(t('Backup Complete.'));
+    \Drupal::messenger()->addMessage(t('Backup Complete.'));
   }
   catch (Exception $e) {
-    drupal_set_message($e->getMessage(), 'error');
+    \Drupal::messenger()->addMessage($e->getMessage(), 'error');
   }
 }
 
@@ -56,8 +60,8 @@ function backup_migrate_perform_backup($source_id, $destination_id, $config = []
  * @param string $source_id
  * @param string|array $destination_id
  * @param string|null $file_id
- * @param array $config
  * @param string $file_id
+ * @param array|null $config
  */
 function backup_migrate_perform_restore($source_id, $destination_id, $file_id = NULL, $config = []) {
   try {
@@ -66,10 +70,10 @@ function backup_migrate_perform_restore($source_id, $destination_id, $file_id =
 
     // Run the backup.
     $bam->restore($source_id, $destination_id, $file_id);
-    drupal_set_message(t('Restore Complete.'));
+    \Drupal::messenger()->addMessage(t('Restore Complete.'));
   }
   catch (Exception $e) {
-    drupal_set_message($e->getMessage(), 'error');
+    \Drupal::messenger()->addMessage($e->getMessage(), 'error');
     return;
   }
 }
@@ -77,28 +81,28 @@ function backup_migrate_perform_restore($source_id, $destination_id, $file_id =
 /**
  * Get a BackupMigrate service object.
  *
- * @param array $config_array
+ * @param array|null $config
  *  An array of configuration arrays, keyed by plugin id.
- * @param array $options
+ * @param array|null $options
  *  A keyed array of options.
  *
- * @return \BackupMigrate\Core\Main\BackupMigrate
+ * @return \Drupal\backup_migrate\Core\Main\BackupMigrate
  */
-function backup_migrate_get_service_object($config_array = [], $options = []) {
+function backup_migrate_get_service_object($config = [], $options = []) {
   static $bam = NULL;
 
   // If the static cached object has not been loaded.
   if ($bam === NULL) {
     // Create the service object.
-    $bam = new \BackupMigrate\Core\Main\BackupMigrate();
+    $bam = new \Drupal\backup_migrate\Core\Main\BackupMigrate();
 
     // Allow other modules to alter the object.
     \Drupal::moduleHandler()->alter('backup_migrate_service_object', $bam, $options);
   }
 
   // Set the configuration overrides if any were passed in.
-  if ($config_array) {
-    $bam->setConfig(new Config($config_array));
+  if ($config) {
+    $bam->setConfig(new Config($config));
   }
 
   return $bam;
@@ -109,8 +113,8 @@ function backup_migrate_get_service_object($config_array = [], $options = []) {
  *
  * Add the core Backup and Migrate plugins to the service object.
  *
- * @param \BackupMigrate\Core\Main\BackupMigrateInterface $bam
- * @param array $options
+ * @param \Drupal\backup_migrate\Core\Main\BackupMigrateInterface $bam
+ * @param array|null $options
  */
 function backup_migrate_backup_migrate_service_object_alter(BackupMigrateInterface &$bam, $options = []) {
   $sources = $bam->sources();
@@ -121,71 +125,70 @@ function backup_migrate_backup_migrate_service_object_alter(BackupMigrateInterfa
 
   // Add a temp file manager which can access the drupal temp directory.
   $services->add('TempFileAdapter',
-    new \BackupMigrate\Drupal\File\DrupalTempFileAdapter(\Drupal::service('file_system'), 'temporary://', 'bam')
+    new DrupalTempFileAdapter(\Drupal::service('file_system'), 'temporary://', 'bam')
   );
 
   $services->add('TempFileManager',
-    new \BackupMigrate\Core\File\TempFileManager($services->get('TempFileAdapter'))
+    new TempFileManager($services->get('TempFileAdapter'))
   );
 
   // Add a logger which prints everything to the browser.
   $services->add('Logger',
-    new \BackupMigrate\Drupal\Environment\DrupalSetMessageLogger()
+    new DrupalSetMessageLogger()
   );
 
-  $services->add('ArchiveReader', new \BackupMigrate\Core\Service\TarArchiveReader());
-  $services->add('ArchiveWriter', new \BackupMigrate\Core\Service\TarArchiveWriter());
+  $services->add('ArchiveReader', new TarArchiveReader());
+  $services->add('ArchiveWriter', new TarArchiveWriter());
 
   // If this is a nobrowser op (cron) then do not add the browser plugins.
-  // TODO: Make this better.
+  // @todo Make this better.
   if (empty($options['nobrowser'])) {
     // Add a download destination.
     $user = \Drupal::currentUser();
     if ($user->hasPermission('access backup files')) {
-      $destinations->add('download', new \BackupMigrate\Drupal\Destination\DrupalBrowserDownloadDestination(new Config(['name' => t('Download')])));
+      $destinations->add('download', new DrupalBrowserDownloadDestination(new Config(['name' => t('Download')])));
     }
     // Add an upload destination.
-    $destinations->add('upload', new \BackupMigrate\Drupal\Destination\DrupalBrowserUploadDestination(new Config(['name' => t('Upload')])));
+    $destinations->add('upload', new DrupalBrowserUploadDestination(new Config(['name' => t('Upload')])));
   }
 
   // Add a file naming filter.
-  $plugins->add('namer', new \BackupMigrate\Core\Filter\FileNamer());
+  $plugins->add('namer', new FileNamer());
 
   // Add a compression filter.
-  $plugins->add('compressor', new \BackupMigrate\Core\Filter\CompressionFilter());
+  $plugins->add('compressor', new CompressionFilter());
 
   // Add the Encrypt utilities filter.
-  $plugins->add('encrypt', new \BackupMigrate\Drupal\Filter\DrupalEncrypt());
+  $plugins->add('encrypt', new DrupalEncrypt());
 
   // Add the Drupal utilities filter.
-  $plugins->add('utils', new \BackupMigrate\Drupal\Filter\DrupalUtils());
+  $plugins->add('utils', new DrupalUtils());
 
   // Add a file metadata filter.
-  $plugins->add('metadata', new \BackupMigrate\Core\Filter\MetadataWriter(
+  $plugins->add('metadata', new MetadataWriter(
     new Config([
       'generator' => 'Backup and Migrate for Drupal (https://www.drupal.org/project/backup_migrate)',
       'generatorurl' => 'https://www.drupal.org/project/backup_migrate',
-      'generatorversion' => BACKUP_MIGRATE_MODULE_VERSION
+      'generatorversion' => BACKUP_MIGRATE_MODULE_VERSION,
     ])
-    ));
+  ));
 
-    // Add the custom configured sources.
-    foreach (Source::loadMultiple() as $source) {
-      $source->getPlugin()->alterBackupMigrate($bam, $source->get('id'), $options);
-    }
+  // Add the custom configured sources.
+  foreach (Source::loadMultiple() as $source) {
+    $source->getPlugin()->alterBackupMigrate($bam, $source->get('id'), $options);
+  }
 
-    // Add the custom configured destination.
-    foreach (Destination::loadMultiple() as $destination) {
-      $destination->getPlugin()->alterBackupMigrate($bam, $destination->get('id'), $options);
-    }
+  // Add the custom configured destination.
+  foreach (Destination::loadMultiple() as $destination) {
+    $destination->getPlugin()->alterBackupMigrate($bam, $destination->get('id'), $options);
+  }
 }
 
 /**
  * Implements hook_cron().
- *
- * Runs all of the enabled schedules if they are due to be run..
  */
 function backup_migrate_cron() {
+  // Runs all of the enabled schedules.
   $bam = backup_migrate_get_service_object([], ['nobrowser' => TRUE]);
 
   $schedules = Schedule::loadMultiple();
@@ -198,7 +201,8 @@ function backup_migrate_cron() {
  * Implements hook_form_alter().
  */
 function backup_migrate_form_alter(&$form, FormStateInterface $form_state, $form_id) {
-  // Label the items being deleted on uninstall to make the 'entire site' listing less terrifying.
+  // Label the items being deleted on uninstall to make the 'entire site'
+  // listing less terrifying.
   if ($form_id === 'system_modules_uninstall_confirm_form') {
     if (isset($form['entity_deletes']['backup_migrate_source'])) {
       $form['text']['#markup'] .= '<p>' . t('Uninstalling Backup and Migrate will delete any custom Backup and Migrate configuration. <strong>Previously created backups will not be deleted.</strong>') . '</p>';
